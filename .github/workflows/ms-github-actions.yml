name: Moonshot CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
#   COOKBOOK_RUN: "python -m moonshot cli run_cookbook '$COOKBOOK_RUN_NAME' \"['common-risk-easy','common-risk-hard','mlc-ai-safety']\" \"['azure-openai-gpt4o']\" -n 1"
#   COOKBOOK_RUN_NAME: testcookbookrun-${{ github.run_id }}
  GITHUB_MOONSHOT_CI_REPO_LOC: ${{ vars.GH_MOONSHOT_CI_REPO_LOC }}
  MOONSHOT_ENDPOINTS_LIST: ${{ vars.MOONSHOT_UPDATE_ENDPOINTS_LIST }}
#   GITLAB_MOONSHOT_PROJECT_TOKEN: ${{ secrets.GITLAB_MOONSHOT_PROJECT_TOKEN }}

jobs:
  run_ms_script:
    runs-on: ubuntu-latest
    container:
      image: python:3.11
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # - name: Install moonshot package with all dependencies
      #   run: |
      #     echo "Installing moonshot..."
      #     pip install "aiverify-moonshot[all]"

      # - name: Clone forked repository and install requirements
      #   run: |
      #     echo "Cloning forked repository and installing requirements..."
      #     git clone https://github.com/$GITHUB_MOONSHOT_CI_REPO_LOC
      #     pip install -r moonshot-data/requirements.txt

      - name: Set logging information
        run: |
          echo "Setting log info..."
          echo "MS_LOG_NAME=moonshot" >> $GITHUB_ENV
          echo "MS_LOG_LEVEL=debug" >> $GITHUB_ENV
          echo "MS_LOG_TO_FILE=true" >> $GITHUB_ENV

      - name: Create environment variables file
        run: |
          echo "Creating env file..."
          cat <<EOF >> .env
          ATTACK_MODULES="./moonshot-data/attack-modules"
          BOOKMARKS="./moonshot-data/generated-outputs/bookmarks"
          CONNECTORS="./moonshot-data/connectors"
          CONNECTORS_ENDPOINTS="./moonshot-data/connectors-endpoints"
          CONTEXT_STRATEGY="./moonshot-data/context-strategy"
          COOKBOOKS="./moonshot-data/cookbooks"
          DATABASES="./moonshot-data/generated-outputs/databases"
          DATABASES_MODULES="./moonshot-data/databases-modules"
          DATASETS="./moonshot-data/datasets"
          IO_MODULES="./moonshot-data/io-modules"
          METRICS="./moonshot-data/metrics"
          PROMPT_TEMPLATES="./moonshot-data/prompt-templates"
          RECIPES="./moonshot-data/recipes"
          RESULTS="./moonshot-data/generated-outputs/results"
          RESULTS_MODULES="./moonshot-data/results-modules"
          RUNNERS="./moonshot-data/generated-outputs/runners"
          RUNNERS_MODULES="./moonshot-data/runners-modules"
          TOKENIZERS_PARALLELISM=false
          HOST_ADDRESS=127.0.0.1
          HOST_PORT=5000
          MOONSHOT_UI_CALLBACK_URL=http://localhost:3000/api/v1/benchmarks/status
          EOF

      - name: Update endpoints
        env:
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
        run: |
          echo "Updating endpoints..."
          IFS=';' read -ra ENDPOINTS <<< $MOONSHOT_ENDPOINTS_LIST
          echo $MOONSHOT_ENDPOINTS_LIST
          echo $ENDPOINTS
          for cmd in "${ENDPOINTS[@]}"; do
            echo "Executing: $cmd"
          #   eval $cmd
          done

      # - name: Trigger cookbook run
      #   run: |
      #     echo "Triggering cookbook run... This may take some time."
      #     IFS=';' read -ra COOKBOOKS <<< "${{ env.MOONSHOT_RUN_COOKBOOKS_LIST }}"
      #     for cmd in "${COOKBOOKS[@]}"; do
      #       echo "Executing: $cmd"
      #       eval $cmd
      #     done

  # display_ms_script:
  #   runs-on: ubuntu-latest
  #   needs: run_ms_script
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Define path to JSON file
  #       run: |
  #         json_file="moonshot-data/generated-outputs/results/$COOKBOOK_RUN_NAME.json"
  #         if [ ! -f "$json_file" ]; then
  #           echo "File $json_file not found!"
  #           exit 1
  #         fi

  #     - name: Install jq package
  #       run: |
  #         sudo apt-get update && sudo apt-get install jq -y

  #     - name: Print results
  #       run: |
  #         printf "+------------------+----------------------------------+------------------+-----------------+-------------------+-------+\n"
  #         printf "| %-16s | %-32s | %-16s | %-15s | %-17s | %-5s |\n" "cookbook_id" "recipe_id" "model_id" "num_of_prompts" "avg_grade_value" "grade"
  #         printf "+==================+==================================+==================+=================+===================+=======+\n"
  #         jq -r '
  #           .results.cookbooks[] |
  #           .id as $cookbook_id |
  #           .recipes[] |
  #           .id as $recipe_id |
  #           .evaluation_summary[] |
  #           .model_id as $model_id |
  #           .num_of_prompts as $num_of_prompts |
  #           .avg_grade_value as $avg_grade_value |
  #           .grade as $grade |
  #           "\($cookbook_id[0:16]) \($recipe_id[0:32]) \($model_id[0:16]) \($num_of_prompts) \($avg_grade_value | tonumber | . * 100 | round / 100) \($grade)"
  #         ' "$json_file" | while read -r cookbook_id recipe_id model_id num_of_prompts avg_grade_value grade; do
  #           printf "| %-16s | %-32s | %-16s | %-15s | %-17s | %-5s |\n" "$cookbook_id" "$recipe_id" "$model_id" "$num_of_prompts" "$avg_grade_value" "$grade"
  #           printf "+------------------+----------------------------------+------------------+-----------------+-------------------+-------+\n"
  #         done

  # commit_ms_script:
  #   runs-on: ubuntu-latest
  #   needs: display_ms_script
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Configure git user
  #       run: |
  #         git config --global user.email "ci@example.com"
  #         git config --global user.name "CI Bot"

  #     - name: Add and commit generated output files
  #       run: |
  #         cd moonshot-data
  #         git add -f ./generated-outputs/*
  #         git commit -m "Update generated files [ci skip] - Pipeline ID ($GITHUB_RUN_ID)"
  #         git push https://oauth2:${{ secrets.GITLAB_MOONSHOT_PROJECT_TOKEN }}@$GITLAB_MOONSHOT_CI_REPO_LOC HEAD